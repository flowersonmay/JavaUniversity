// MTC.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <chrono>
#include <omp.h>

void Test(int s)
{
    std::cout << std::endl << "------------------------" << s << "------------------------" << std::endl;
    float** m1 = new float* [s];
    float** m2 = new float* [s];
    float** result = new float*[s];

    for (int i = 0; i < s; i++)
    {
        m1[i] = new float[s];
        m2[i] = new float[s];
        result[i] = new float[s];

        for (int j = 0; j < s; j++)
        {
            m1[i][j] = rand() % 10;
            m2[i][j] = rand() % 10;
            result[i][j] = 0;
        }
    }
    auto start = omp_get_wtime();
#pragma omp parallel for num_threads(16)
    for (int i = 0; i < s; i++)
    {
        for (int j = 0; j < s; j++)
        {
            for (int k = 0; k < s; k++)
            {
                result[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }

    std::cout << "Async for " << s << " items: " << omp_get_wtime() - start << std::endl;

    start = omp_get_wtime();
    for (int i = 0; i < s; i++)
    {
        for (int j = 0; j < s; j++)
        {
            result[i][j] = 0;
            for (int k = 0; k < s; k++)
            {
                result[i][j] += m1[i][k] * m2[k][j];
            }
        }
    }

    std::cout << "Sync for " << s << " items: " << omp_get_wtime() - start << std::endl;


    if (s <= 5)
    {
        for (int i = 0; i < s; i++)
        {
            for (int j = 0; j < s; j++)
            {
                std::cout << m1[i][j] << " ";
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;

        for (int i = 0; i < s; i++)
        {
            for (int j = 0; j < s; j++)
            {
                std::cout << m2[i][j] << " ";
            }
            std::cout << std::endl;
        }
        std::cout << std::endl;

        for (int i = 0; i < s; i++)
        {
            for (int j = 0; j < s; j++)
            {
                std::cout << result[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    std::cout << "------------------------" << s << "------------------------" << std::endl << std::endl;
}

int main()
{
    omp_set_num_threads(16);

    Test(5);
    Test(100);
    Test(500);
    Test(1000);
}